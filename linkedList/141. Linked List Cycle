//141. Linked List Cycle
//Link=> https://leetcode.com/problems/linked-list-cycle/

Code:

/////////////////
Using HashMaps
/////////////////

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null)return false;
        HashMap<ListNode,Integer> map=new HashMap<ListNode,Integer>();
        ListNode curr=head;
        while(curr!=null){
            if(map.containsKey(curr)){
                return true;
            }
            map.put(curr,curr.val);
            curr=curr.next;
        }
        return false;
    }
}



/////////////////
Using 2 ptrs
/////////////////

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        ListNode slow = head , fast = head.next;
        while(slow != fast) {
            if(fast == null || fast.next == null) return false;
            
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}
